{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Arty CM0 DesignStart project\n\n\nUnder construction\n\n\nThis github repository provides the necessary files to use the\nDesignStart Cortex-M0 system on a Digilent ARTY FPGA board.\n\n\n\n\nThis project does not include the source code of the DesignStart\n  Cortex-M0. You have to request it directly from ARM.\n\n\nIn addition to allow synthesis of the designstart to a Xilinx target,\nthis project allows also simulations using the simulation tools :\n\n\n\n\nIcarus iverilog\n\n\nXilinx simulation tools (xvlog/xelab/xsim)\n\n\nVerilator\n\n\n\n\nProject layout\n\n\ncommon        # shared files for configuring the projects\nips           # Modules created using Xilinx Vivado\nrtl           # Verilog RTL files for the project\nsim           # Verilog simulation directory\nsynt          # synthesis directory\nverilator_sim # Verilator build/simulation directory\nsoftware      # Local testsuites (asm/c programs)\nimport        # imported github submodules (currently only amba_components)\ndocs          # the mkdocs/markdown sources for this site\nsite          # generated html/js files for this site\n\n\n\nInstallation\n\n\nCloning from github\n\n\nThis project uses submodules. To clone it you need to run the following commands :\n\n\n git clone git@github.com:rbarzic/arty-cm0-designstart.git\n cd arty-cm0-designstart\n git submodule init\n git submodule update\n\n\n\n\nSetting environment variables\n\n\nThe ARM Cortex-MO designstart package is not included in this project. You must download it yourself and setup the \nDESIGNSTART_TOP\n variable to point to the directory it had be installed in :\n\n\nexport DESIGNSTART_TOP=\nPath to Cortex-M0 designstart top folder\n\n\n\n\nPatching Cortex-M0 designstart folder\n\n\nThe code provided by ARM needs to be modified. The changes are gathered in a patch file.\n\n\nmake -C patches patch\n\n\n\nCompiling test programs\n\n\nTest programs are located under the software directory.\n\n\nTo compile, enter the directory of the program and type :\n\nmake all\n\n\nSeveral files (bin, hex, vmem and vmem32,..) should be created\n\n\nSimulation  using Icarus iverilog\n\n\nGo into a test program directory (under software/xxx) then :\n\n\n# Compile C code\nmake all\n# build iverilog simulator files\nmake comp\n# run the simulation\nmake run\n\n# optionaly, you can look at waveform using gtkwave\nmake wave\n\n\n\n\nSimulation should stop when \nmain()\n exits or \nexit()\n is called directly\n\n\nSynthesis using Vivado\n\n\nThe complete flow is shown in the following figure :\n\n\n\n\nThe first part of the flow is the generation of the first bit file.\nVerilog files are parsed by Vivado together with constraint files and\na file to initialize the program memory.\n\n\nLater, the Vivado utility \nupdatemem\n is used to change the content of\nthe program memory without the need for a new synthesys\n\n\nFiles used by the synthesis flow :\n\n\nvivado_utils.tcl        # Various _tcl_ functions\nvivado.tcl              # The main synthesis script\nreport_bram.tcl         # tcl code to output block ram placement (for _updatemem_)\nxilinx_constraints.xdc  # Constraint file (clock, pads,..)\ncode.vmem32             # the original content of the program memory\n\n\n\nRunning the synthesis\n\n\nmake synt\n\n\n\n\nFiles generated by the  synthesis flow :\n\n\nrpt/cpu.bit        # Xilinx bitstream file\nchip_layout.v      # Post Place\nRoute Verilog netlist\nchip_layout.sdf    # Post Place\nRoute timing backannotation file (SDF)\nbram.yaml          # Block RAM placement file\n\n\n\nProgramming the device\n\n\nUpdating the program memory\n\n\nTo create a new bit file without launching a new synthesis :\n\n\n\nmake update TEST=\ntest name\n\n\n\n\n\nwhere \n is the name of a test under \nsoftware\n\n\nSimulation  using Vivado\n\n\nRTL simulation\n\n\nPost Place\nRoute backannotated simulation\n\n\nSimulation  using Verilator", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-arty-cm0-designstart-project", 
            "text": "Under construction  This github repository provides the necessary files to use the\nDesignStart Cortex-M0 system on a Digilent ARTY FPGA board.   This project does not include the source code of the DesignStart\n  Cortex-M0. You have to request it directly from ARM.  In addition to allow synthesis of the designstart to a Xilinx target,\nthis project allows also simulations using the simulation tools :   Icarus iverilog  Xilinx simulation tools (xvlog/xelab/xsim)  Verilator", 
            "title": "Welcome to Arty CM0 DesignStart project"
        }, 
        {
            "location": "/#project-layout", 
            "text": "common        # shared files for configuring the projects\nips           # Modules created using Xilinx Vivado\nrtl           # Verilog RTL files for the project\nsim           # Verilog simulation directory\nsynt          # synthesis directory\nverilator_sim # Verilator build/simulation directory\nsoftware      # Local testsuites (asm/c programs)\nimport        # imported github submodules (currently only amba_components)\ndocs          # the mkdocs/markdown sources for this site\nsite          # generated html/js files for this site", 
            "title": "Project layout"
        }, 
        {
            "location": "/#installation", 
            "text": "Cloning from github  This project uses submodules. To clone it you need to run the following commands :   git clone git@github.com:rbarzic/arty-cm0-designstart.git\n cd arty-cm0-designstart\n git submodule init\n git submodule update  Setting environment variables  The ARM Cortex-MO designstart package is not included in this project. You must download it yourself and setup the  DESIGNSTART_TOP  variable to point to the directory it had be installed in :  export DESIGNSTART_TOP= Path to Cortex-M0 designstart top folder   Patching Cortex-M0 designstart folder  The code provided by ARM needs to be modified. The changes are gathered in a patch file.  make -C patches patch", 
            "title": "Installation"
        }, 
        {
            "location": "/#compiling-test-programs", 
            "text": "Test programs are located under the software directory.  To compile, enter the directory of the program and type : make all  Several files (bin, hex, vmem and vmem32,..) should be created", 
            "title": "Compiling test programs"
        }, 
        {
            "location": "/#simulation-using-icarus-iverilog", 
            "text": "Go into a test program directory (under software/xxx) then :  # Compile C code\nmake all\n# build iverilog simulator files\nmake comp\n# run the simulation\nmake run\n\n# optionaly, you can look at waveform using gtkwave\nmake wave  Simulation should stop when  main()  exits or  exit()  is called directly", 
            "title": "Simulation  using Icarus iverilog"
        }, 
        {
            "location": "/#synthesis-using-vivado", 
            "text": "The complete flow is shown in the following figure :   The first part of the flow is the generation of the first bit file.\nVerilog files are parsed by Vivado together with constraint files and\na file to initialize the program memory.  Later, the Vivado utility  updatemem  is used to change the content of\nthe program memory without the need for a new synthesys  Files used by the synthesis flow :  vivado_utils.tcl        # Various _tcl_ functions\nvivado.tcl              # The main synthesis script\nreport_bram.tcl         # tcl code to output block ram placement (for _updatemem_)\nxilinx_constraints.xdc  # Constraint file (clock, pads,..)\ncode.vmem32             # the original content of the program memory  Running the synthesis  make synt  Files generated by the  synthesis flow :  rpt/cpu.bit        # Xilinx bitstream file\nchip_layout.v      # Post Place Route Verilog netlist\nchip_layout.sdf    # Post Place Route timing backannotation file (SDF)\nbram.yaml          # Block RAM placement file  Programming the device  Updating the program memory  To create a new bit file without launching a new synthesis :  \nmake update TEST= test name   where   is the name of a test under  software", 
            "title": "Synthesis using Vivado"
        }, 
        {
            "location": "/#simulation-using-vivado", 
            "text": "RTL simulation  Post Place Route backannotated simulation", 
            "title": "Simulation  using Vivado"
        }, 
        {
            "location": "/#simulation-using-verilator", 
            "text": "", 
            "title": "Simulation  using Verilator"
        }
    ]
}